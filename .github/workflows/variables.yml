name: Define Workflow Variables
on:
  workflow_call:
    outputs:
      timestamp:
        description: "The current timestamp"
        value: ${{ jobs.obtain.outputs.TIMESTAMP }}
      release-name:
        description: "Name of the edX release taken from the branch name"
        value: ${{ jobs.obtain.outputs.RELEASE-NAME }}
      project:
        description: "Name of the EOL project taken from the branch name"
        value: ${{ jobs.obtain.outputs.PROJECT }}
      code:
        description: "Code of the EOL project taken from the project name"
        value: ${{ jobs.obtain.outputs.CODE }}
      is-release:
        description: "Flag to indicate if the branch is a production branch"
        value: ${{ jobs.obtain.outputs.IS-RELEASE }}
      is-pr:
        description: "Flag to indicate if the workflow is part of a pull request"
        value: ${{ jobs.obtain.outputs.IS-PR }}

jobs:
  obtain:
    runs-on: ubuntu-latest
    outputs:
      TIMESTAMP: ${{ steps.ts.outputs.TS }}
      RELEASE-NAME: ${{ steps.release.outputs.result }}
      PROJECT: ${{ steps.project.outputs.result }}
      CODE: ${{ steps.code.outputs.result }}
      IS-RELEASE: ${{ steps.code.outputs.is_release }}
      IS-PR: ${{ steps.code.outputs.is_pr }}
    steps:
      - name: Take current date
        id: ts
        run: echo "TS=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: Obtain release version
        id: release
        uses: actions/script@v7
        with:
          result-encoding: string
          script: |
            if ( "${{ github.ref }}".match(/^refs\/heads\/(eol|openuchile|vlabx)\/(\w+)(\.master)?$/) ) { // push to development branch case
              return "${{ github.ref }}".replace(/^refs\/heads\/(eol|openuchile|vlabx)\/(\w+)(\.master)?$/,'$2')
            } else if ( "${{ github.ref }}".match(/^refs\/heads\/(eol|openuchile|vlabx)-release\/(\w+)(\.master)?$/) ) { // push to production branch case
              return "${{ github.ref }}".replace(/^refs\/heads\/(eol|openuchile|vlabx)-release\/(\w+)(\.master)?$/,'$2')
            } else if ( "${{ github.event.pull_request.base.ref }}".match(/^(eol|openuchile|vlabx)\/(\w+)(\.master)?$/) ) { // pr to development branch case
              return "${{ github.event.pull_request.base.ref }}".replace(/^(eol|openuchile|vlabx)\/(\w+)(\.master)?$/,'$2')
            } else if ( "${{ github.event.pull_request.base.ref }}".match(/^(eol|openuchile|vlabx)-release\/(\w+)(\.master)?$/) ) { // pr to production branch case
              return "${{ github.event.pull_request.base.ref }}".replace(/^(eol|openuchile|vlabx)-release\/(\w+)(\.master)?$/,'$2')
            } else throw 'No version'

      - name: Obtain release project
        id: project
        uses: actions/script@v7
        with:
          result-encoding: string
          script: |
            if ( "${{ github.ref }}".match(/^refs\/heads\/(eol|openuchile|vlabx)\//) ) { // push to development branch case
              return "${{ github.ref }}".replace(/^refs\/heads\/(eol|openuchile|vlabx)\/.+$/,'$1')
            } else if ( "${{ github.ref }}".match(/^refs\/heads\/(eol|openuchile|vlabx)-release\//) ) { // push to production branch case
              return "${{ github.ref }}".replace(/^refs\/heads\/(eol|openuchile|vlabx)-release\/.+$/,'$1')
            } else if ( "${{ github.event.pull_request.base.ref }}".match(/^(eol|openuchile|vlabx)\//) ) { // pr to development branch case
              return "${{ github.event.pull_request.base.ref }}".replace(/^(eol|openuchile|vlabx)\/.+$/,'$1')
            } else if ( "${{ github.event.pull_request.base.ref }}".match(/^(eol|openuchile|vlabx)-release\//) ) { // pr to production branch case
              return "${{ github.event.pull_request.base.ref }}".replace(/^(eol|openuchile|vlabx)-release\/.+$/,'$1')
            } else throw 'No project'

      - name: Obtain release code
        id: code
        uses: actions/script@v7
        with:
          result-encoding: string
          script: |
            if ( "${{ steps.project.outputs.result }}" == "eol" ) {
              return "eol"
            } else if ( "${{ steps.project.outputs.result }}" == "openuchile" ) {
              return "ou"
            } else if ( "${{ steps.project.outputs.result }}" == "vlabx" ) {
              return "vl"
            } else throw 'No code'

      - name: Define production release flag
        id: is_release
        uses: actions/script@v7
        with:
          result-encoding: string
          script: |
            if ( "${{ github.ref }}".match(/^refs\/heads\/(eol|openuchile|vlabx)-release\/(\w+)(\.master)?$/) ) { // push to production branch case
              return true
            } else return false

      - name: Define pull request flag
        id: is_pr
        uses: actions/script@v7
        with:
          result-encoding: string
          script: |
            if ( "${{ github.event.pull_request.base.ref }}".match(/^(eol|openuchile|vlabx)(-release)?\/(\w+)(\.master)?$/) ) { // pr to image generation branch case
              return true
            } else return false

  validate:
    needs: [ obtain ]
    runs-on: ubuntu-latest
    steps:
      - name: Print variables
        run: |
          echo TS=${{ needs.obtain.outputs.TIMESTAMP }}
          echo RELEASE-NAME=${{ needs.obtain.outputs.RELEASE-NAME }}
          echo PROJECT=${{ needs.obtain.outputs.PROJECT }}
          echo CODE=${{ needs.obtain.outputs.CODE }}
          echo IS-RELEASE=${{ needs.obtain.outputs.IS-RELEASE }}
          echo IS-PR=${{ needs.obtain.outputs.IS-PR }}

      - name: Fail on empty values
        if: ${{ needs.obtain.outputs.TIMESTAMP == '' || needs.obtain.outputs.RELEASE-NAME == '' || needs.obtain.outputs.PROJECT == '' || needs.obtain.outputs.CODE == '' || needs.obtain.outputs.IS-RELEASE == '' || needs.obtain.outputs.IS-PR == '' }}
        run: exit 1
